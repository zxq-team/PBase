package com.kt.kpi.fixreport.util;

import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.sql.RowSet;

import net.sf.json.JSONObject;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.kit.common.AppConstants;
import com.kt.kpi.fixreport.model.KpiReportWorkFlow;
import com.kt.kpi.fixreport.model.MidFault;
import com.kt.kpi.framework.dao.GeneDao;
/*
 * 通过request获得客户端数据,完成对后台数据操作
 * request必须有className  2011-05-16周小桥
 */
@Service 
public class ClientDataPro {
	@Autowired
	 private GeneDao geneDao;
	@Autowired
	SearchOperate searchOperate;
	 private static Logger logger = Logger.getLogger(ClientDataPro.class);
	 private String className=null;
	 private String updateSql=null;
	 HttpServletRequest request=null;
	 Object object=null;
	 ProduceSetEntity  pse=null;	
		public String getClassName() {
			return className;
		}
		public void setClassName(String className) {
			this.className = className;
		}
		public HttpServletRequest getRequest() {
			return request;
		}
		public void setRequest(HttpServletRequest request) {
			this.request = request;
		}
  public	void ClientDataPro(){//构造方法1
			
		
		}
	public	void setBaseData(HttpServletRequest request){//设置基础数据1
		    this.request=request;
		    this.className=request.getParameter("className");
		    if(this.className!=null){//空实体类不初始化实体对象
			pse=new ProduceSetEntity(this.className);
			String lowerOrUpper=request.getParameter("lowerOrUpper");
			if(lowerOrUpper==null||"".equals(lowerOrUpper))
			     object=pse.getClientData(request);
			else if("lower".equals(lowerOrUpper))
				 object=pse.getClientDataLow(request);
			else if("Upper".equals(lowerOrUpper))
				 object=pse.getClientDataUpper(request);
		    }
		}
	public	void setBaseData(String className, HttpServletRequest request){//设置基础数据2
			this.className=className;
			this.request=request;			
		 if(this.className!=null){//空实体类不初始化实体对象
			pse=new ProduceSetEntity(this.className);//获得
			String lowerOrUpper=request.getParameter("lowerOrUpper");
			if(lowerOrUpper==null||"".equals(lowerOrUpper))
			     object=pse.getClientData(request);
			else if("lower".equals(lowerOrUpper))
				 object=pse.getClientDataLow(request);
			else if("upper".equals(lowerOrUpper))
				 object=pse.getClientDataUpper(request);
		  }
		}
	public	void setBaseData(String className, HttpServletRequest request,List condition){//设置基础数据3
		this.className=className;
		this.request=request;
	   if(this.className!=null){//空实体类不初始化实体对象
		pse=new ProduceSetEntity(this.className,condition);//获得
		String lowerOrUpper=request.getParameter("lowerOrUpper");
		if(lowerOrUpper==null||"".equals(lowerOrUpper))
		     object=pse.getClientData(request);
		else if("lower".equals(lowerOrUpper))
			 object=pse.getClientDataLow(request);
		else if("Upper".equals(lowerOrUpper))
			 object=pse.getClientDataUpper(request);
	   }
	}

	public Object getObject() {
		pse=new ProduceSetEntity(this.className);
		this.request=request;
		object=pse.getClientData(request);
		return object;
	}
	public void setObject(Object object) {
		this.object = object;
	}	
	
	
	/*
	 * 获得登录者的部门ID和部门名
	 */	 
	public  Map  getLoginDept(String   userid) { 
			 Map	map=new HashMap();
				if(userid!=null){
					userid=userid.trim();
				      String sql="select  k.dept_id,d.dept_simlename from  kpi_user k,dm_dim_deptinfo d where " 
				      		     +"  k.userid='"+userid+"' and d.dept_id=k.dept_id";
				      try{
				    	  RowSet rs=geneDao.executeQuery(sql, null);
				    		while(rs.next()){  			
				    			map.put("dept_id", rs.getString("dept_id"));
				    			map.put("dept_name", rs.getString("dept_simlename"));
				    		}
				      }
					catch(Exception e){
					  	e.printStackTrace();
					}
					return map;		
				   }
				else return null;		
				 
		}
	/*
	 * 获得初始化采集备注
	 */	 
	private  String  getInputRemark(String   excelkey) { 
			 String	inputRemark=null;
				if(excelkey!=null){
					excelkey=excelkey.trim();
				      String sql="select e.remark from DW_FACT_EXCELHEAD e where e.excelkey='"+excelkey+"' " ;
				      		   
				      try{
				    	  RowSet rs=geneDao.executeQuery(sql, null);
				    		while(rs.next()){  			
				    			inputRemark= rs.getString("remark");				    			
				    		}
				    		String str="";
				    		if(inputRemark!=null&&!"".equals(inputRemark)){
				    			inputRemark=inputRemark.trim();				    		
				    		for(int i=80;i<inputRemark.length();i=i+80){				    			
				    			str+=inputRemark.substring(i-80, i)+"<br/>";
				    		 }
				    		}
				    		if(str!=null&&!"".equals(str))
				    		         inputRemark=str;
				      }
					catch(Exception e){
					  	e.printStackTrace();
					}
					return inputRemark;		
				   }
				else return inputRemark;		
				 
		}

	/*
	 * 分页技术zxq
	 */
	public void getPaging(String sql,int pagesize,int currPage ,JSONObject jsonObj)throws Exception{
		int records = getRowCount(sql);//得到记录总数
		int rowStart = 0;
			int rowEnd =0;
			int total = records%pagesize==0 ? records/pagesize : records/pagesize+1;// 总页数 
			//得到查询记录的开始数
			if (currPage>total) {
				currPage=total;
			}
			rowStart = (currPage-1)*pagesize+1;
			rowEnd = currPage*pagesize;
			//得到分页查询的SQL语句
			sql = getPageSQL(sql, rowStart, rowEnd);
			logger.info(sql);
			RowSet	 rows = geneDao.executeQueryOra(sql);
			ResultSetMetaData rsmd = rows.getMetaData();
			int columns = rsmd.getColumnCount();
			List<Map<String, String>> datas = getListData(rows, rsmd, columns);
	    jsonObj.put("rows", datas);
	    jsonObj.put("page", currPage);     // 当前页 
	    jsonObj.put("total", total);    // 总页数 
	    jsonObj.put("records", records);  // 总记录数 
	  }	
/*
 * 
 * 查询的数据存放在List对象中以备前台展现
 */
private List<Map<String, String>> getListData(RowSet rows,
			ResultSetMetaData rsmd,int columns) throws Exception {
		List<Map<String, String>> datas = new ArrayList<Map<String,String>>();
		logger.info("----------------------");
		Map<String, String> data = null;
		String value;
		String key;
		while (rows.next()) {
			data = new LinkedHashMap<String, String>();
			for (int i = 1; i <= columns; i++) {
				key = rsmd.getColumnName(i);
				value =rows.getString(key);
				 						
			 if (value == null) value = "";
				data.put(key.toLowerCase(), value);
			}
			if (!data.isEmpty()) {
				datas.add(data);
			}
		}
		return datas;
	   }
	/**
	 * 返回查询后的记录总数
	 * @param sql
	 * @return
	 * @throws Exception
	 */
	public int getRowCount(final String sql) throws Exception {
		RowSet rows = geneDao.executeQuery("select count(*) row_count from ("+sql+")");
		int rowcount=0;
		if (rows.next()) {
			rowcount = rows.getInt("row_count");
		}
		return rowcount;
	}
	/**
	 * 得到分页查询SQL
	 * @param {sql String} 查询SQL语句
	 * @param {rowStart int} 查询的开始行数
	 * @param {rowEnd int} 查询的结束行数
	 * @return {String} 返回带分页功能的查询SQL语句
	 */
	public String getPageSQL(String sql,int rowStart,int rowEnd) {
		String pageSQL = "select * from (" +
							"select rownum rowIndex,a.* from("+
								"select * from("+
									sql+")" +
							") a where rownum<="+rowEnd+
						" )b where b.rowIndex between "+rowStart+" and "+rowEnd;
		return pageSQL;
	}
/*
 * 设置登录者的部门
 * 
 */	
 public  void setLoginDept(HttpServletRequest request, JSONObject jsonObj) {		
			  String userid=(String)request.getSession().getAttribute(AppConstants.SESSION_USERID);		
	        try {
	        	 Map dept= getLoginDept(userid) ;
	    		 String loginDept_id=(String)dept.get("dept_id");
	    		 String loginDept_name=(String)dept.get("dept_name");	    			    		 //两种方式 
	    		 //1.jsonObj通过前台data获得
	    		 jsonObj.put("loginDept_id", loginDept_id);
	    		 jsonObj.put("loginDept_name", loginDept_name);
	    		 //采集数据时获得备注
	    		 String inputRemark=getInputRemark(request.getParameter("excelKey"));
	    		 jsonObj.put("inputRemark",inputRemark );
	    		 //2.userdata通过前台getUserData()
	    		 Map	userMap=new HashMap();
	    		 userMap.put("loginDept_id", loginDept_id);
	    		 userMap.put("loginDept_name", loginDept_name);	    		
	    		 userMap.put("inputRemark", inputRemark);   		
	    		 jsonObj.put("userdata", userMap);
	    		 
	    	
			} catch (Exception e) {
				e.printStackTrace();
			}finally{
				
			} 
		}
 /*
  * 判断数字符
  * 
  */
 public String getStartNumString(String str){
	 int stat=0;
	 for(int i=0;i<str.length();i++){
		 char c=str.charAt(i);
		 if(c>='0'&&c<='9'){
			 stat=i;
			 break; 
		 }			 
	 }	 
	 return str.substring(stat);
    }
 
 /**
	 * 通过部门，日期等关键字段查询值
	 * @author 周小桥
	 * @date Apr 8, 2011
	 * @param table
	 * @param staticTime
	 * @param deptId
	 * @param key
	 * @return
	 * @throws SQLException
	 */
	public String getkeyVal(String table,String deptId,String dateKey, String staticTime,String queryKey) throws SQLException {
		String sql = "select "+queryKey+" from "+table+" " ;
		if(staticTime.length()<=10)//月指标
			sql+=" where d_gddw_unit='"+deptId+"' and "+dateKey+">=to_date('"+staticTime+"-01"+"','yyyy-mm-dd') and "+dateKey+"<Add_MONTHS(to_date('"+staticTime+"','yyyy-mm'),1) " ;
		else //日指标
			sql+=" where d_gddw_unit='"+deptId+"' and "+dateKey+"=to_date('"+staticTime+"','yyyy-mm-dd')  ";
		RowSet rs = geneDao.executeQuery(sql);
		if(rs.next()){
			String str=rs.getString(1);
			if(str.lastIndexOf(".")>0)
			  str=str.substring(0,str.lastIndexOf("."));
			return str;
		}else{
			return null;
		}
	}
	
/*--------------------------------------------------------------以下对数据的增删改查操作------------------------------------------------	
	1.查询 queryDBData
	2.更新 saveOrUpdate,excuteUpdateSql
	3.新增 saveOrUpdate
	4.删除 deleteClientDate
	*/
	
/*--------------------------------------------------查询后台数据JQGrid结构--------------------------------------------------------------*/	
public RowSet getRowSet(String sql){
		RowSet row =null;
		row=geneDao.executeQuery(sql);
		return row;
	}
	
/* 
 * @param request
 * @param jsonObj
 * @param sql
*/
public void queryDBData(JSONObject jsonObj,String sql,String table) throws Exception {
    	String userId = (String)request.getSession().getAttribute(AppConstants.SESSION_USERID);
    	//获取页号
 		int currPage = request.getParameter("page") != null ? Integer
				.parseInt(request.getParameter("page")) : 1;
		int rowStart = 0;
		int rowEnd =0;
		int rowcount = 0;
	    // 设置页码 by wxd
		int pagesize = 20;//AppConstants.PAGE_DATALIST_COUNT;
		if (request.getParameter("psize") != null
				&& !"".equals(request.getParameter("psize"))) {
			pagesize = Integer.parseInt(request.getParameter("psize"));
		}
		//将数据查询结果放在jsonObj对象中
		if("dw_fact_fixreport_monitor".equals(table)){//特殊处理配网报表监控
			 getPaging( sql, pagesize, currPage , jsonObj);
		}
		else{//其他情况
			String newSql=	getWhereQuery(sql,table);
			getPaging( newSql, pagesize, currPage , jsonObj);
		}
	 
	}
/*
 * 
 *  //利用hibernate更新或保存
 * 
 */
public	void saveOrUpdate(){
		if(object!=null){
			try{
			geneDao.saveOrUpdate(object);
			}
			catch(Exception e){
				e.printStackTrace();
			}
		}
	}
	
	/*
	 * //利用hibernate更新或保存
	 * 
	 */
	public	int updateObject(long keyId){
		int upateInf=0;
		if(object!=null&&keyId>0){			
		try{
			object=geneDao.getHibernateTemplate().get(object.getClass(), keyId);
			if(object!=null){
			  pse.setObj(object);
			  object=pse.getClientData(request);
			  geneDao.saveOrUpdate(object);
			  upateInf=1;
			 }	
			 else upateInf=-1;
			}
			catch(Exception e){
				e.printStackTrace();
			}
		}
		return upateInf;
	}
	/*
	 * //删除数据,支持批量删除
	 * 返回删除记录条数dels
	 * params 单个关键字段的删除,一次可删除多条
	 */
	public	int deleteClientData(String table,String deletes){
		int dels=0;
		if(table!=null){
			String sql="  delete from "+table+" f  where f.id in ";
			String ids="";
			boolean first =true;	
			String p_id="";
			String sn="";
		    String[] temp = deletes.split("\\|");
			 {//删除问题
				for (int i = 0; i < temp.length; i++) {
					if (temp[i].equals("")) {
						
					}else {
						if (first) {
							ids+=temp[i];
							first = false;									
						}else {
							ids+=","+temp[i];
						
						}
					}
				}
				if (ids.equals("")) {
					ids="''";
				}
				sql+="("+ids+")";
				dels=geneDao.executeUpdate(sql);
			}
		}
		return dels;
	}
/*
 * 
 * params 多个关键字段的删除,一次删除一条记录
 * 
 */	
 private int delMultKeyData(String table){
	 int dels=0;
	 String sql="  delete from "+table+" ";
	 String whereSql=null;
	 try{
	 if(table!=null){  		 
	     RowSet rows=getTableKeys(table);
		 String key=null;
		 String value=null;
	  while(rows.next()){	 
	     if("N".equals(rows.getString("NULLABLE")))//关键字段不能为空(先处理)
	      {
	    //1.客户端大写字段	
		    key=rows.getString("COLUMN_NAME");			
		    value=request.getParameter(key);
            if(value==null||"".equals(value)){
        	      value=request.getParameter(key);
		       }
         //2.客户端小写字段  
		   key=key.toLowerCase();			
		   value=request.getParameter(key);
		   if(value==null||"".equals(value)){
			   whereSql=null;
			     break;
			    
		      }			   
		  else{
			   if(whereSql!=null&&whereSql.contains("and")){
				  whereSql+=" and "+getKeyDateUpdate(rows.getString("DATA_TYPE"),key,value);
			       }
			   else 
				    whereSql+=" where "+getKeyDateUpdate(rows.getString("DATA_TYPE"),key,value);				 
		       }
	       }
         }
	    //执行删除
	       if(whereSql!=null){
	             sql+=whereSql;
	             dels=geneDao.executeUpdate(sql);
	           }
	          else 
		              return dels;
	  }
	 else 
		 dels=0;
	 }
	 catch(Exception e){
	     e.printStackTrace();
	 }
	 return dels;
 }
/*
 * 通过sql语句更新
 * param table
 * param request
 * 说明:前台字段最好小写且字段名必须与数据库字段名保持一致
 */
	public int excuteUpdateSql(String table){
		  int updateRecords=0;
		  table=table.toUpperCase();
		  updateSql=" update "+ table+" ";	
		  String whereSql="";
	   try{	
			request.setCharacterEncoding("UTF-8"); 
			RowSet rows =getTableKeys(table); //geneDao.executeQuery(keySql, null);
			RowSet rowsVal =null;
			int keySignal=0;//1表示获得关键字结束
			
		 while(rows.next()){
			 String key=null;
			 String value=null;
		  if("N".equals(rows.getString("NULLABLE")))//关键字段不能为空(先处理)
		   {
			 key=rows.getString("COLUMN_NAME");			
			 value=request.getParameter(key);//客户端大写字段	
             if(value==null||"".equals(value)){
            	value=request.getParameter(key);
			 }
			 key=key.toLowerCase();//客户端小写字段			
			 value=request.getParameter(key);
			 if(value==null||"".equals(value)){
				 updateSql=null;
				 break;
			 }			   
			 else{
				 if(whereSql!=null&&whereSql.contains("and")){
					 whereSql+=" and "+getKeyDateUpdate(rows.getString("DATA_TYPE"),key,value);
				 }
				 else 
					 whereSql+=" where "+getKeyDateUpdate(rows.getString("DATA_TYPE"),key,value);				 
			   }
		     }
		   else if("Y".equals(rows.getString("NULLABLE"))){//非关键字段
			   //第一先检查更新值是否在数据库中对应的值是否相同,相同不予更新不同才更新不至于浪费资源
			   //拼写更新语句			     
			    if(keySignal!=1){//1.查询数据库中的相应数据
			    	 keySignal=1; 
			    	 String sqlQuery="select *from "+table+" "+whereSql;
			    	 rowsVal = geneDao.executeQuery(sqlQuery, null);	
			    	 rowsVal.next();
			     }
			     key=rows.getString("COLUMN_NAME");
				 key=key.toLowerCase();//客户端小写字段
				 value=request.getParameter(key);
				 //2.检查更新值是否在数据库中对应的值是否相同,相同不予更新不同才更新
				 if(rowsVal!=null){
					if(value!=null&&value.equals( rowsVal.getString(key))) continue;//结束本次循环
				 }
				 //3.拼写更新语句
				 if(value!=null&&!"null".equals(value)){//只对空对象不更新,空值要更新
				   if(updateSql.contains("set")){
					 updateSql+=" , "+getKeyDateUpdate(rows.getString("DATA_TYPE"),key,value);
				    }
				    else 
					 updateSql+=" set "+getKeyDateUpdate(rows.getString("DATA_TYPE"),key,value);
				  }
		      }
							
		    }
		    updateSql+=whereSql;
		    updateRecords=geneDao.executeUpdate(updateSql);
		  }
			catch(Exception e){
				e.printStackTrace();
			}
			finally{
		
			}
		  return updateRecords;
	  }
/*
 * 
 * 直接执行存储过程
 */	
public 	void excuteProcedure(String procedureName,List params){
	
	try{

		if(params==null||params.size()==0){
			geneDao.callProcedure(procedureName+"()", params);	
		}
		else{
			String pa="";
			for(int i=0;i<params.size();i++){
				if(i==0){
					pa="(?,";
				}
				else if(i==params.size()-1){
					pa+="?)";
				}
				else pa+="?,";
			}
			geneDao.callProcedure(procedureName+pa, params);	
		}
		
	
	  }
	  catch(Exception e){
		e.printStackTrace();
	  }
	}
/*
 * 获取表结构的所有字段,类型,是否为空
 * 
 */	
private RowSet getTableKeys(String table){
	RowSet rows =null;
	table=table.toUpperCase();//必须大写否则查询不到
	String keySql=" select u.COLUMN_NAME,u.DATA_TYPE,u.NULLABLE from user_tab_columns u " +
                  " where u.TABLE_NAME  = '"+table+"' order by  u.NULLABLE ";
	try{
		rows= geneDao.executeQuery(keySql, null);		
	  }
	  catch(Exception e){
		e.printStackTrace();
	  }
		return rows ;
  }	
/*
 * 拼字段的sql语句
 * 
 */	
private String getKeyDateUpdate(String type,String key,String value){
		 String sql=null;
		 if((type.contains("TIMESTAMP")||"DATE".equals(type))){//日期类型
			 sql=key+"= to_date('"+value+"','yyyy-mm-dd') ";
		  }
		 else sql=key+"='"+value+"' ";
		 return sql ;
	}
/*
 * 添加条件查询
 * 
 */
private String getWhereQuery(String sql,String table){
	//操作类型:录入、审核、浏览
	String target = request.getParameter("target");	 	
	String deptType=request.getParameter("deptType");
	String DEPTID = request.getParameter("DGddwUnit");
//1.部门过滤	
	if (DEPTID==null || DEPTID.equals("")) {
		String userId = (String) request.getSession().getAttribute(
				AppConstants.SESSION_USERID);
		Map mapLogin=getLoginDept(userId);
		DEPTID = (String)mapLogin.get("dept_id");		
	}
	String deptSql="";
	deptSql+="  d_gddw_unit in(select dept_id from dm_dim_rel_stat_to_dept start with dept_id='"+DEPTID+"' " +
					" connect by prior dept_id = parent_id) ";	
	//检查主表背后是否存在where
	int tS=sql.indexOf(table);
	 if(sql.indexOf("where", tS+table.length())>0)
	    sql+=" and "+deptSql;
	 else
		 sql+=" where "+deptSql;
//2.操作类型过滤
	String kpiId = request.getParameter("kpiId");
	String userId = (String)request.getSession().getAttribute(AppConstants.SESSION_USERID);
	if (target!=null) {
		if (target.equals("AC_INPUT")) {
			 if(sql.contains("where"))
				 sql+=" and state in (2,3) ";
			 else
			    sql+=" where  state in (2,3) ";

		}else if (target.equals("AC_APPROVE")) {
		//	sql+=" and state in (2,3) ";
			//增加审核流程后要加上的过滤条件
			 if(sql.contains("where"))
				   sql+=" and  id in(select kpi_dim from kpi_report_wf_bpm a,report_wf_node_user b where a.wf_id=b.wf_id "+
					" and a.node_id=b.node_id and b.valid=1 and a.kpi_id=b.kpi_id and a.bpm_sts in ('101','103')" +
					" and b.kpi_id="+kpiId+" and b.user_id='"+userId+"')";
			 else
			    sql+=" where id in(select kpi_dim from kpi_report_wf_bpm a,report_wf_node_user b where a.wf_id=b.wf_id "+
					" and a.node_id=b.node_id and b.valid=1 and a.kpi_id=b.kpi_id and a.bpm_sts in ('101','103')" +
					" and b.kpi_id="+kpiId+" and b.user_id='"+userId+"')";
			// sql+="  and 1=FUNC_FirstNodeSQL(id,'"+userId+"','dw_fact_lowdefect')";//节点退回
		}
	}
//3.search过滤
		boolean search =false;
		search = Boolean.parseBoolean(request.getParameter("_search"));
		if(search){
			String wheresql="";
			  String  filters = request.getParameter("filters");   
			  wheresql=searchOperate.getWhereSql(filters,table);
			  if(!sql.contains("where"))
			     sql+=" and "+wheresql;
			  else
				   sql+=" where "+wheresql;
		}
//4.附加条件过滤
		String extraSQL = request.getParameter("extraSQL");
		if(extraSQL!=null&&!"".equals(extraSQL)){
			extraSQL=extraSQL.replace("''", "'");
			sql+=" "+extraSQL;
		}
		 return sql ;
 }
/*
 * 
 * 获得表名
 */
private String getTableBySQL(String sql){
	   String table=null;
	   int start=sql.indexOf("from");
	   for(int i=start+4;i<sql.length();i++ ){
		   if(sql.charAt(i)!=' ') {
			   start=i;
			   break;
		   }
	   }
	   int end =sql.indexOf(" ", start);
	   if(sql.contains("where")) end=sql.indexOf("where");
	   table=sql.substring(start, end);
	   return table;
    }

/*
 * 
 * 两个字符窜数字相加
 */
public String getAddStr(String str1,String str2){
	   String str=null;
	   if(str1==null||"".equals(str1)){
		   str1="0";
	   }
	   if(str2==null||"".equals(str2)){
		   str2="0";
	   }
		int point=0;
    	for(int i=str1.length()-1;i>0;i--){
    		char c=str1.charAt(i);
    		if(c=='.'){
    			point=i;
    			break;
    		}		    		
    	}
    	for(int i=str2.length()-1;i>0;i--){
    		char c=str2.charAt(i);
    		if(c=='.'){
    			point=i;
    			break;
    		}		    		
    	}
    if(point>0)	{//存在小数点
    	   double d=Double.parseDouble(str1)+Double.parseDouble(str2);
           str=String.valueOf(d);	
    }
    else{//整数相加
    	long g=Long.parseLong(str1)+Long.parseLong(str2);
    	 str=String.valueOf(g);
    }
	   return str;
    }
/*
 * 
 * 两个字符窜数字相除
 */
public double getDivisionStr(String divisioned,String division){
	   String str=null;
	   if(divisioned==null||"".equals(divisioned)){
		   divisioned="0";
	   }
	   if(division==null||"".equals(division)){
		   division="1";
	   }
	   double g=Double.parseDouble(divisioned)/Double.parseDouble(division);   
         //四舍五入保留3位小数 
	   BigDecimal bg=new BigDecimal(g).setScale(3, BigDecimal.ROUND_HALF_UP);
	   g=Double.parseDouble(bg.toString());
	   return g;
    }
/*
 * 获得百分率
 * 
 */
public String getRate(String divisioned,String division){
	String rate=null;
	 double g= 100*getDivisionStr( divisioned, division);
	 rate=String.valueOf(g);
	 if(rate.indexOf(".")>0)rate=rate.substring(0, rate.indexOf(".")+2);
	 else rate=rate+".0";
	return  rate;
}
/*
 * 查询工作流记录
 * 
 */			
	public Map  queryWorkFlow(String kpid,String id ) throws Exception{
		   List workFlowList=new ArrayList();
		   Map map=new HashMap();
		   //1.审核状态查看流程
	        String sql=" select BPM_ID,   BPM_DATE,  APPROVE_USER, "
                       +"  decode(APPROVE_DESIGN,'100','初始状态', '101','待审批', '102','审批通过', '103','退回待审批',"
                       +"  '104','退回') APPROVE_DESIGN, to_char(APPROVE_DATE,'yyyy-mm-dd hh24:mi:ss') APPROVE_DATE  , (  select NODE_NAME from kpi_wf_node where node_id=k.node_id ) NODE_ID" 
                       +"  ,decode(DESIGN_TYPE,'0','提交审核', '1','审核通过', '2','退回', '未操作') DESIGN_TYPE"
                       +"  from   kpi_report_workFlow k where k.bpm_id in ( "
                       +" select distinct w.bpm_id from   kpi_report_wf_bpm w where w.kpi_id='"+kpid+"' and  w.kpi_dim='"+id+"' )   order by APPROVE_DATE desc ";
	        RowSet rows = geneDao.executeQuery(sql,null);
	        RowSet rows_copy=null;
	        //获得工作流结点
	        String flow_sql="  select distinct k.node_id,k.node_name from  kpi_wf_node k ,kpi_report_wf_bpm r where "
               + " r.kpi_id='"+kpid+"'and  r.kpi_dim='"+id+"' and  k.wf_id=r.wf_id order by k.node_id ";
           if(!rows.next()){//2.查询状态查看流程(必须归档流程走完),使用历史表
        	   sql=" select BPM_ID,   BPM_DATE,  APPROVE_USER, "
                   +"  decode(APPROVE_DESIGN,'100','初始状态', '101','待审批', '102','审批通过', '103','退回待审批',"
                   +"  '104','退回') APPROVE_DESIGN, to_char(APPROVE_DATE,'yyyy-mm-dd hh24:mi:ss') APPROVE_DATE  , (  select NODE_NAME from kpi_wf_node where node_id=k.node_id ) NODE_ID" 
                   +"  ,decode(DESIGN_TYPE,'0','提交审核', '1','审核通过', '2','退回', '未操作') DESIGN_TYPE"
                   +"  from   kpi_report_workFlow k where k.bpm_id in ( "
                   +" select distinct w.bpm_id from   kpi_report_wf_bpm_his w where w.kpi_id='"+kpid+"' and  w.kpi_dim='"+id+"' )   order by APPROVE_DATE desc ";
        	   rows_copy = geneDao.executeQuery(sql,null);
        	     flow_sql="  select distinct k.node_id,k.node_name from  kpi_wf_node k ,kpi_report_wf_bpm_his r where "
                 + " r.kpi_id='"+kpid+"'and  r.kpi_dim='"+id+"' and  k.wf_id=r.wf_id order by k.node_id ";
                }
           else 
        	   rows_copy = geneDao.executeQuery(sql,null);          
	        while(rows_copy.next()){//可能存在2个以上审核人
		        KpiReportWorkFlow kf=new KpiReportWorkFlow();
		        kf.setApproveDateStr(rows_copy.getString("APPROVE_DATE"));
		        kf.setApproveDesign(rows_copy.getString("APPROVE_DESIGN"));
		        kf.setApproveUser(rows_copy.getString("APPROVE_USER"));	  
		        kf.setNodeName(rows_copy.getString("NODE_ID"));		   
		        kf.setDesignType(rows_copy.getString("DESIGN_TYPE"));	   
		         workFlowList.add(kf);
	        }
	        map.put("workFlowList", workFlowList);	    
	        RowSet rowsNode = geneDao.executeQuery(flow_sql,null);
	        List node=new ArrayList(); 
	        while(rowsNode.next()){
	        node.add(rowsNode.getString("node_name"));
	        }
	        map.put("node", node);
	        return map;
		}
/**
 * 
 * 设置字符类型字段值2011-07-29zxq
 */	
	 public void setObjectStrKey(Object obj, String methodName,String val){
			try{
			  Method method = obj.getClass().getDeclaredMethod(methodName, new Class[]{String.class});	
			  method.invoke(obj, new Object[]{val});
			}
			catch(Exception e){
				e.printStackTrace();
			}
			
		}	
	/*
	 * 主函数
	 */
	public static void main(String[] args) {
		ClientDataPro cp=new ClientDataPro();
		MidFault m=new MidFault();
		cp.setObjectStrKey(m,"setDEPT_ID","wwwwwwww");
		//cp.getTableBySQL("select *from dw_fact_midfault d");
		//cp.getUpdateSql("dw_fact_midfault",null);
	    System.out.println("fgfgf==="+m.getDEPT_ID());
	   // System.out.println(objNew.getFZmXjtx());
		   
	   

	}
	public String getUpdateSql() {
		return updateSql;
	}
	public void setUpdateSql(String updateSql) {
		this.updateSql = updateSql;
	}
 }
