package com.kt.kpi.fixreport.util;
import java.net.URLDecoder;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.sql.RowSet;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.kt.kpi.common.util.DateUtil;
import com.kt.kpi.framework.dao.GeneDao;

/**
 * 数据查询
 * @author zhouxiaoqiao/2011/03/11
 *
 */
@Service
public class SearchOperate {
	@Autowired
	private GeneDao geneDao;
	/*
	  * 组装条件sql语句2011/04/10周小桥
	  * params 
	  * String filters
	  */
	 public String getWhereSql(String filters,String table) {  		 
		  filters=filters.replaceAll("quot;", "'").replaceAll("&amp;", "").replaceAll(" ","");
		  String wheresql=""; 
		    JSONObject jsonObject = JSONObject.fromObject(filters);   
		    JSONArray rules = jsonObject.getJSONArray("rules"); 
		    String way=(String)jsonObject.get("groupOp");
		    List dateList= getDateKeys(table);
		     try{
		    	
		    	  for(Object obj : rules) {   
		  	        JSONObject rule = (JSONObject) obj;   	           
		  	        String field = rule.getString("field");   
		  	        String op = rule.getString("op");   
		  	        String data = rule.getString("data");
		  	        data = URLDecoder.decode(URLDecoder.decode(data,"UTF-8"),"UTF-8");
		  	        boolean isDate=this.isDateKey(dateList, field);
		  	        if(data==null||"".equals(data)) continue ;
		  	        if("".equals(wheresql)){//第一个条件	
		  	        	//特殊处理部门字段
		  	        	if("d_gddw_unitname".equals(field)||"dept_name".equals(field)||"DGddwUnitName".equals(field)||"f_dept_name".equals(field)){
		  	                String	deptSql=" d_gddw_unit in(select dept_id from dm_dim_rel_stat_to_dept start with dept_id in " +
		  	                		         "( select d.dept_id from    DM_DIM_DEPTINFO d where d.dept_simlename='"+data+"') " +
						                      " connect by prior dept_id = parent_id) ";
		  	                 wheresql=" where "+deptSql;
		  	        	}
		  	        	else wheresql=" where "+getKeySql(field , op, data,isDate);
		  	    
		  	            }
		  	           else{//非第一个条件
		  	        		//特殊处理部门字段
			  	        	if("d_gddw_unitname".equals(field)||"dept_name".equals(field)||"DGddwUnitName".equals(field)||"f_dept_name".equals(field)){
			  	                String	deptSql=" d_gddw_unit in(select dept_id from dm_dim_rel_stat_to_dept start with dept_id in " +
			  	                		         "( select d.dept_id from    DM_DIM_DEPTINFO d where d.dept_simlename='"+data+"') " +
							                      " connect by prior dept_id = parent_id) ";
			  	                 wheresql=" where "+deptSql;
			  	        	}
			  	        	else    wheresql+=" "+ way+" "+getKeySql(field , op, data,isDate);	
		  	             }		  	        	
		  	        }
		    	  
		     }
		    catch(Exception e){
			  e.printStackTrace();
		    }
		    	return wheresql;   
		}
 //单个字段条件
/*
 * 普通查询
 * 
 */ 
 private String getKeySql(String field ,String op,String data,boolean isDate){
	    String wheresql="";
	   if(data!=null){
	     	data=data.trim();
	     }
		 else return "";
	   if("eq".equals(op)) {
	    	//处理日期字段
	 		if(isDate){
	 			 wheresql= field+"= to_date('"+data+"','yyyy-mm-dd')"; 
	 		  }
	 		 else	wheresql= field+"='"+data+"'";
	     	}
	     else if("ne".equals(op)) {
	         	wheresql= field+"<>'"+data+"'";
	     	}
	     else if("lt".equals(op)) {
	     		//处理日期字段
	   		  if(isDate){
	   			 wheresql= field+"< to_date('"+data+"','yyyy-mm-dd')"; 
	   		   }
	   		  else  wheresql= field+"<'"+data+"'";	        		
	     	}
	     else if("le".equals(op)){	        	
	     		//处理日期字段
	   		 if(isDate){
	   			  wheresql= field+"<= to_date('"+data+"','yyyy-mm-dd')"; 
	   		   }
	   		  else	wheresql= field+"<='"+data+"'";
	     	}
	     else if("gt".equals(op)){
	     		//处理日期字段
	   		  if(isDate){
	   		 	 wheresql= field+"> to_date('"+data+"','yyyy-mm-dd')"; 
	   		   }
	   		  else wheresql= field+">'"+data+"'";        		
	     	}
	     else if("ge".equals(op)) {
	     		//处理日期字段
	   		 if(isDate){
	   			 wheresql= field+">= to_date('"+data+"','yyyy-mm-dd')"; 
	   		  }
	   		  else wheresql= field+">='"+data+"'";
	     	}
	     else if("cn".equals(op)){
	     		wheresql= field+" like '%"+data+"%'";
	     		
	     	}
	     else if("nc".equals(op)) {
	     		wheresql= field+" not like '%"+data+"%'";   		
	     	}      
	     
	     return wheresql ;
	   }
 
 //单个字段条件
 /*
  * hibenate条件查询
  * 
  */
 
 public DetachedCriteria getWhereHql(String filters,DetachedCriteria detach ) {  		 
	  filters=filters.replaceAll("quot;", "'").replaceAll("&amp;", "").replaceAll(" ","");
	  String wheresql=""; 	    
	    JSONObject jsonObject = JSONObject.fromObject(filters);   
	    JSONArray rules = jsonObject.getJSONArray("rules");   
	     try{
	    	  for(Object obj : rules) {   
	  	        JSONObject rule = (JSONObject) obj;   	           
	  	        String field = rule.getString("field");   
	  	        String op = rule.getString("op");   
	  	        String data = rule.getString("data");
	  	        data = URLDecoder.decode(URLDecoder.decode(data,"UTF-8"),"UTF-8");
	  	        if(data==null||"".equals(data)) continue ;

	  	        else
	  	        	detach=this.getHibernateSql(detach, field , op, data);	  	        
	    	  }
	     }
	    catch(Exception e){
		  e.printStackTrace();
	    }
	 
	    	return detach;
  
	}
 private DetachedCriteria getHibernateSql(DetachedCriteria detach,String field ,String op,String data){
		 if(data!=null){
	     	data=data.trim();
	     }
		 else return detach;
		 try{
			 getClassName(detach);
			 ProduceSetEntity  pse=new ProduceSetEntity(getClassName(detach));
			 //特殊处理staticDate-->staticTime
			if("staticDate".equals(field)){
				field="staticTime";
			}		
			if("eq".equals(op)) {    					
	 			detach.add(Restrictions.eq(field, this.getFieldBaseObj(pse.getByNameType(field), data)));
	     	}
	     	else if("ne".equals(op)) {
	     		detach.add(Restrictions.ne(field, this.getFieldBaseObj(pse.getByNameType(field), data)));;
	     	}
	     	else if("lt".equals(op)) {
	     	
	   			detach.add(Restrictions.lt(field, this.getFieldBaseObj(pse.getByNameType(field), data)));	   				   		    		
	     	}
	     	else if("le".equals(op)){	        	
	   			detach.add(Restrictions.le(field, this.getFieldBaseObj(pse.getByNameType(field), data)));   			

	     	}
	     	else if("gt".equals(op)){
	   			detach.add(Restrictions.gt(field, this.getFieldBaseObj(pse.getByNameType(field), data)));  	   		 		   		  	
	     	}
	     	else if("ge".equals(op)) {
	   			detach.add(Restrictions.ge(field, this.getFieldBaseObj(pse.getByNameType(field), data)));	   	
	     	}
	     	else if("cn".equals(op)){
	     		detach.add(Restrictions.like(field, this.getFieldBaseObj(pse.getByNameType(field), data)));	     		
	     	}
	     	else if("nc".equals(op)) {
	     		detach.add(Restrictions.like(field, this.getFieldBaseObj(pse.getByNameType(field), data)));	
	     	}      
		 }
		 catch(Exception e){
			 e.printStackTrace();
		 }
	     return detach ;
	   }
 
	 /*
	  * 是否
	  * 
	  */
	 public String getYesNoOption() throws SQLException {
			String optins="<select id=\"unitSelectId\">";
				optins+="<option value='1'>是</option>";
				optins+="<option value='0'>否</option>";
			optins+="</select>";
			return optins;
		}
	 /*
	  * 缺陷类别
	  * 
	  */
	 public String getFaultTypeOption() throws SQLException {
			String optins="<select id=\"unitSelectId\">";
				optins+="<option value='J'>紧急缺陷</option>";
				optins+="<option value='Z'>重大缺陷</option>";
				optins+="<option value='Y'>一般缺陷</option>";
			optins+="</select>";
			return optins;
		}

	 public String getSelectStateOption() throws SQLException {
			String optins="<select id=\"unitSelectId\">";
		
				optins+="<option value='3'>草稿</option>";
				optins+="<option value='2'>被退回 </option>";
				optins+="<option value='1'>审批通过</option>";
				optins+="<option value='0'>待审批</option>";
			optins+="</select>";
			return optins;
		}
 
	 /*
	  * 保护类型
	  */
	 public String getSelectProtectType() throws SQLException {			
		 String sql="select d.dim_id,d.dim_name  from dw_dim_gddw_bfdzlx d ";
		 String optins="";
			optins=this.getSelectOption(sql,"dim_name","dim_id");
			return optins;
		}
	 /*
	  * 设备类型
	  */
	 public String getSelectDeviceType() throws SQLException {			
		 String sql="SELECT z.sbxl_id,z.sbxl_name FROM dw_dim_gddw_zysblx z where  z.type<>'N' ";
		 String optins="";
			optins=this.getSelectOption(sql,"sbxl_name","sbxl_id");
			return optins;
		}
	 /*
	  * 缺陷原因归类
	  */
	 public String getSelectFaultClass() throws SQLException {			
		 String sql="SELECT p.xl_id,p.xl_name FROM dw_dim_gddw_pdqxyyxl p";
		 String optins="";
			optins=this.getSelectOption(sql,"XL_NAME","XL_ID");
			return optins;
		}
	 /*
	  * 发现手段
	  */
	 public String getSelectDefectWay() throws SQLException {			
		 String sql="select dim_id,dim_name from dw_dim_gddw_qxfxsd";
		 String optins="";
			optins=this.getSelectOption(sql, "dim_name", "dim_id");
			return optins;
		}
	 public String getSelectDept(String userId) throws SQLException {			
			String sql="SELECT v.simplename,v.simplename FROM v_dim_biee_unit v WHERE type1='GDS' "
	            +"and v.DIM_ID in (  select dept_id  from dm_dim_rel_stat_to_dept "
	            +"start with dept_id in (select u.dept_id    from kpi_user u  "
	            +" where u.userid = '"+userId+"')   connect by prior dept_id = parent_id )";
			String optins="";
			optins=this.getSelectOption(sql, "simplename", "simplename");
			return optins;
		}
	 private String getSelectOption(String sql,String name,String value) throws SQLException {			
			RowSet rows = geneDao.executeQueryOra(sql);
			String optins="<select id=\"unitSelectId\">";
			while (rows.next()) {
				optins+="<option value="+rows.getString(value)+">"+
						rows.getString(name)+"</option>";
			}
			optins+="</select>";
			return optins;
		}
	 
	 /*
		 * 字符转日期
		 */

		 private static Timestamp StringChangDate(String str){
		      Timestamp ts=null;
			  try{
				  if(str!=null){
					  str=str.trim();
					 if(!"".equals(str)){
					  java.sql.Date  sdt=java.sql.Date.valueOf(str); 
					  SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
					  String time = df.format(sdt);
					   ts = Timestamp.valueOf(time);
				    }
			     }
				  else
					  return null;

			  }
			  catch(Exception e){
				  e.printStackTrace();
			  }
		    return ts ;
		   }
/*
 * 通过DetachedCriteria获得实体类名
 * 
 */		 
 private String getClassName(DetachedCriteria detach){
			 String className=null;
	    	 String strClass=detach.toString();
	    	 int end= strClass.lastIndexOf(":this[]");
	    	 int start= strClass.lastIndexOf(".", end);
	    	 className=strClass.substring(start+1, end);
			 return className;
		 }
/*
* 
*   
* 产生基本数据类型对象
*/
 private Object getFieldBaseObj(String fieldType, String fieldVal){
		Object c = null;
		if("String".equals(fieldType)){
			c = fieldVal;
		}else if("Float".equals(fieldType)||"float".equals(fieldType)){
			c = Float.parseFloat(fieldVal); //new Object[]{new Float(fieldVal)};
		}else if("Double".equals(fieldType)||"double".equals(fieldType)){
			c =Double.parseDouble(fieldVal);// new Object[]{new Double(fieldVal)};
		}else if("Integer".equals(fieldType)||"int".equals(fieldType)){
			c =Integer.parseInt(fieldVal);// new Object[]{new Integer(fieldVal)};
		}else if("long".equals(fieldType)||"Long".equals(fieldType)){
			if("_empty".equals(fieldVal))
			   c=0l;
			else 
			   c = Long.parseLong(fieldVal);
		}else if("Date".equals(fieldType)){
			c = (Date) DateUtil.StringToDate(fieldVal);
		}
		else if("Timestamp".equals(fieldType)){
			c=this.StringChangDate(fieldVal);
		}
		return c;
	}
 /*
  * 获取表结构的所有日期字段空
  * 
  */	
 private List getDateKeys(String table){
 	RowSet rows =null;
 	List dateList=new ArrayList();
 	table=table.toUpperCase();//必须大写否则查询不到
 	String keySql=" select u.COLUMN_NAME from user_tab_columns u " +
                   " where u.TABLE_NAME  = '"+table+"' and  (u.DATA_TYPE='DATE' or  u.DATA_TYPE like '%TIMESTAMP%')  ";
 	try{
 		rows= geneDao.executeQuery(keySql, null);	
 		while(rows.next()){
 			dateList.add(rows.getString("COLUMN_NAME"));
 		}
 	  }
 	  catch(Exception e){
 		e.printStackTrace();
 	  }
 		return dateList ;
   }
 /*
  * 判断是否是日期字段
  * 
  */
 private boolean isDateKey(List dateList,String keyName){
	 boolean isDate=false;
	 if(keyName==null||"".equals(keyName))
		 return isDate;
	 else 
		 keyName=keyName.toUpperCase();
	 for(int i=0;i<dateList.size();i++){
		String dataKey=(String)dateList.get(i);
		if(dataKey!=null&&keyName.equals(dataKey)){
			isDate=true;
			break;
		}
			
	 }
	 
	 return isDate;
  }
 }